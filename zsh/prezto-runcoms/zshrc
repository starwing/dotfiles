export DOTFILES=$HOME/.dotfiles
#zmodload zsh/zprof

# zplug {{{1
export ZPLUG_ROOT=$HOME/.zplug
export ZPLUG_HOME=$HOME/.zplug.user
export ZPLUG_REPOS=$DOTFILES/zsh
export ZPLUG_BIN=$ZPLUG_ROOT/bin
export ZPLUG_LOADFILE=$ZPLUG_ROOT/packages.zsh
source $ZPLUG_ROOT/init.zsh

# zplug packages {{{2

zplug 'zplug/zplug'
zplug "b4b4r07/zsh-vimode-visual", defer:3
zplug "changyuheng/fz", defer:1
zplug "junegunn/fzf"
zplug "skywind3000/z.lua"
zplug "sorin-ionescu/prezto", use:"init.zsh"
zplug "zsh-users/zsh-autosuggestions"
zplug "zsh-users/zsh-history-substring-search"
zplug "zsh-users/zsh-syntax-highlighting", defer:2
zplug "nnao45/zsh-kubectl-completion"

zplug "Aloxaf/fzf-tab"
zstyle ":completion:*:git-checkout:*" sort false
zstyle ':completion:*:descriptions' format '[%d]'
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'exa -1 --color=always $realpath'


# prezto {{{2

[ -e "$HOME/.zpreztorc" ] && source $HOME/.zpreztorc

# autocomplete {{{2

#zplug "marlonrichert/zsh-autocomplete"
#
#zstyle ':autocomplete:tab:*' fzf-completion yes
#zstyle ':autocomplete:*' default-context history-incremental-search-backward
#zstyle ':autocomplete:*' min-delay .3  # 300 milliseconds

# z.lua & fz {{{2

FZ_HISTORY_CD_CMD="_zlua"
alias j='z'

# themes {{{2

zstyle ':dotfiles:prompt' theme simple

# simple {{{3

if zstyle -t ':dotfiles:prompt' theme simple; then

NL=$'\n'
if [[ -n $SSH_CONNECTION ]]; then
  host_color=green
else
  host_color=blue
fi
if [ "$UID" -eq 0 ]; then
  user_color=red
else
  user_color=yellow
fi
setopt PROMPT_SUBST
export PS2="%F{yellow}%(!.%#.\\\$) "
export RPS1="%B%(?..%F{red}[%?]%f)[%F{yellow}%D{%T}%f]%b"
export PROMPT="$NL%B%F{$user_color}%n%f @ %F{$host_color}%m%f%b"
PROMPT+=" %B%{in [%F{cyan}\$(collapsed_pwd)%f]%b%}$NL"
PROMPT+="%B%(1j.%F{blue}âœ¦ %f.)%b"
PROMPT+="%B%(?.%F{green}.%F{red})%(!.%#.\\\$)%f%b "

fi

# pure {{{3

if zstyle -t ':dotfiles:prompt' theme pure; then
  zplug "sindresorhus/pure", as:theme, use:"*.zsh"
fi

# spaceship {{{3

if zstyle -t ':dotfiles:prompt' theme spaceship; then
zplug "denysdovhan/spaceship-prompt", \
  use:"spaceship.zsh", from:github, as:theme

# settings
SPACESHIP_PROMPT_ORDER=(user host dir \
  git node rust docker exec_time \
  line_sep jobs exit_code char)
SPACESHIP_RPROMPT_ORDER=(time)
SPACESHIP_TIME_SHOW=true
SPACESHIP_CHAR_SYMBOL='$ '
SPACESHIP_CHAR_SYMBOL_ROOT='# '
SPACESHIP_USER_SHOW=always
SPACESHIP_HOST_SHOW=always
SPACESHIP_HOST_PREFIX='@ '
SPACESHIP_DIR_PREFIX='in ['
SPACESHIP_DIR_SUFFIX='] '
fi

# }}}3
# ------------------------------------------------------------
# Check for uninstalled plugins. {{{2
#if ! zplug check --verbose; then
#  printf "Install? [y/N]: "
#  if read -q; then
#    echo; zplug install
#  fi
#fi
zplug load

# }}}2
# ------------------------------------------------------------
# asdf {{{1

[ -e "$HOME/.asdf/completions/asdf.bash" ] &&
  source $HOME/.asdf/completions/asdf.bash

# iterm2 {{{1

[ -e "${HOME}/.iterm2_shell_integration.zsh" ] && \
  "${HOME}/.iterm2/it2check" && \
  source "${HOME}/.iterm2_shell_integration.zsh"

# nvm {{{1

if [ -d "$HOME/.nvm" ]; then
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
fi

# break the wall {{{1

function fq() {
    if [ -z ${FQ+x} ]; then
	#local proxy=socks5://127.0.0.1:1080
	#local proxy=http://127.0.0.1:1087
	local proxy=http://127.0.0.1:12639
	export all_proxy=$proxy
	export http_proxy=$proxy
	export https_proxy=$proxy
	export FQ=true
	echo "FQ setup"
    else
	unset all_proxy
	unset http_proxy
	unset https_proxy
	unset FQ
	echo "FQ off"
    fi
}

# bookmark {{{1

function m() {
  local MARKPATH="${MARKPATH:-$HOME/.local/share/marks}"
  [ -d "$MARKPATH" ] || mkdir -p -m 700 "$MARKPATH" 2> /dev/null
  case "$1" in
    +*)            # m +foo  - add new bookmark for $PWD
      ln -snf "$(pwd)" "$MARKPATH/${1:1}" 
      ;;
    -*)            # m -foo  - delete a bookmark named "foo"
      rm -i "$MARKPATH/${1:1}" 
      ;;
    /*)            # m /bar  - search bookmarks matching "bar"
      find "$MARKPATH" -type l -name "*${1:1}*" | \
        awk -F "/" '{print $NF}' | MARKPATH="$MARKPATH" xargs -I'{}'\
        sh -c 'echo "{} ->" $(readlink "$MARKPATH/{}")'
      ;;
    "")            # m       - list all bookmarks
      command ls -1 "$MARKPATH/" | MARKPATH="$MARKPATH" xargs -I'{}' \
        sh -c 'echo "{} ->" $(readlink "$MARKPATH/{}")'
      ;;
    *)             # m foo   - cd to the bookmark directory
      local dest="$(readlink "$MARKPATH/$1" 2> /dev/null)"
      [ -d "$dest" ] && cd "$dest" || echo "No such mark: $1"
      ;;
  esac
}

function _cdmark_complete() {
  local MARKPATH="${MARKPATH:-$HOME/.local/share/marks}"
  if [[ "${1}${2}" == "-"* ]]; then
    reply=($(command ls -1 "$MARKPATH" 2> /dev/null | \
      awk '{print "-"$0}'))
  else
    reply=($(command ls -1 "$MARKPATH" 2> /dev/null))
  fi
}

compctl -K _cdmark_complete m


# collapsed_pwd {{{1

function collapsed_pwd() {
    local pwd="$1"
    local home="$HOME"
    local size=${#home}
    [[ $# == 0 ]] && pwd="$PWD"
    [[ -z "$pwd" ]] && return
    if [[ "$pwd" == "/" ]]; then
        echo "/"
        return
    elif [[ "$pwd" == "$home" ]]; then
        echo "~"
        return
    fi
    [[ "$pwd" == "$home/"* ]] && pwd="~${pwd:$size}"
    if [[ -n "$BASH_VERSION" ]]; then
        local IFS="/"
        local elements=($pwd)
        local length=${#elements[@]}
        for ((i=0;i<length-1;i++)); do
            local elem=${elements[$i]}
            [[ ${#elem} -gt 1 ]] && elements[$i]=${elem:0:1}
        done
    else
        local elements=("${(s:/:)pwd}")
        local length=${#elements}
        for i in {1..$((length-1))}; do
            local elem=${elements[$i]}
            [[ ${#elem} > 1 ]] && elements[$i]=${elem[1]}
        done
    fi
    local IFS="/"
    echo "${elements[*]}"
}

# update submodule {{{1

function update_submodule() {
  git config -f .gitmodules --get-regexp '^submodule\.' | perl -lane'
$conf{$F[0]} = $F[1]}{
@mods = map {s,\.path$,,; $_} grep {/\.path$/} keys(%conf);
sub expand{$i = shift; map {$conf{$i . $_}} qw(.path .url .branch)}
for $i (@mods){
    ($path, $url, $branch) = expand($i);
    print(qq{rm -rf $path});
}
for $i (@mods){
    ($path, $url, $branch) = expand($i);
    if ($branch) {
      print(qq{git submodule add -b $branch $url ./$path});
    }
    else {
      print(qq{git submodule add $url ./$path});
    }
}'
}


# alias {{{1

alias ta="tmux attach"
alias love="/Applications/love.app/Contents/MacOS/love"
alias cafe="caffeinate -is"
alias socks5="http_proxy=socks5://127.0.0.1:1080 https_proxy=socks5://127.0.0.1:1080 all_proxy=socks5://127.0.0.1:1080 "

# kubectl {{{1

# This command is used a LOT both below and in daily life
alias k=kubectl

# Manage configuration quickly to switch contexts between local, dev ad staging.
alias kcuc='kubectl config use-context'
alias kcsc='kubectl config set-context'
alias kcdc='kubectl config delete-context'
alias kccc='kubectl config current-context'

# List all contexts
alias kcgc='kubectl config get-contexts'

# Execute a kubectl command against all namespaces
alias kca='_kca(){ kubectl "$@" --all-namespaces;  unset -f _kca; }; _kca'

# Apply a YML file
alias kaf='kubectl apply -f'

# Drop into an interactive terminal on a container
alias kex='kubectl exec -ti'

# General aliases
alias kdel='kubectl delete'
alias kdelf='kubectl delete -f'

# Pod management.
alias kgp='kubectl get pods'
alias kgpa='kubectl get pods --all-namespaces'
alias kgpw='kgp --watch'
alias kgpwide='kgp -o wide'
alias kep='kubectl edit pods'
alias ked='kubectl edit deploys'
alias kdp='kubectl describe pods'
alias kdelp='kubectl delete pods'

# get pod by label: kgpl "app=myapp" -n myns
alias kgpl='kgp -l'

# Service management.
alias kgs='kubectl get svc'
alias kgsa='kubectl get svc --all-namespaces'
alias kgsw='kgs --watch'
alias kgswide='kgs -o wide'
alias kes='kubectl edit svc'
alias kds='kubectl describe svc'
alias kdels='kubectl delete svc'

# Ingress management
alias kgi='kubectl get ingress'
alias kgia='kubectl get ingress --all-namespaces'
alias kei='kubectl edit ingress'
alias kdi='kubectl describe ingress'
alias kdeli='kubectl delete ingress'

# Namespace management
alias kgns='kubectl get namespaces'
alias kens='kubectl edit namespace'
alias kdns='kubectl describe namespace'
alias kdelns='kubectl delete namespace'
alias kcn='kubectl config set-context $(kubectl config current-context) --namespace'

# ConfigMap management
alias kgcm='kubectl get configmaps'
alias kgcma='kubectl get configmaps --all-namespaces'
alias kecm='kubectl edit configmap'
alias kdcm='kubectl describe configmap'
alias kdelcm='kubectl delete configmap'

# Secret management
alias kgsec='kubectl get secret'
alias kgseca='kubectl get secret --all-namespaces'
alias kdsec='kubectl describe secret'
alias kdelsec='kubectl delete secret'

# Deployment management.
alias kgd='kubectl get deployment'
alias kgda='kubectl get deployment --all-namespaces'
alias kgdw='kgd --watch'
alias kgdwide='kgd -o wide'
alias ked='kubectl edit deployment'
alias kdd='kubectl describe deployment'
alias kdeld='kubectl delete deployment'
alias ksd='kubectl scale deployment'
alias krsd='kubectl rollout status deployment'
kres(){
    kubectl set env $@ REFRESHED_AT=$(date +%Y%m%d%H%M%S)
}

# Rollout management.
alias kgrs='kubectl get rs'
alias krh='kubectl rollout history'
alias kru='kubectl rollout undo'

# Statefulset management.
alias kgss='kubectl get statefulset'
alias kgssa='kubectl get statefulset --all-namespaces'
alias kgssw='kgss --watch'
alias kgsswide='kgss -o wide'
alias kess='kubectl edit statefulset'
alias kdss='kubectl describe statefulset'
alias kdelss='kubectl delete statefulset'
alias ksss='kubectl scale statefulset'
alias krsss='kubectl rollout status statefulset'

# Port forwarding
alias kpf="kubectl port-forward"

# Tools for accessing all information
alias kga='kubectl get all'
alias kgaa='kubectl get all --all-namespaces'

# Logs
alias kl='kubectl logs'
alias kl1h='kubectl logs --since 1h'
alias kl1m='kubectl logs --since 1m'
alias kl1s='kubectl logs --since 1s'
alias klf='kubectl logs -f'
alias klf1h='kubectl logs --since 1h -f'
alias klf1m='kubectl logs --since 1m -f'
alias klf1s='kubectl logs --since 1s -f'

# File copy
alias kcp='kubectl cp'

# Node Management
alias kgno='kubectl get nodes'
alias keno='kubectl edit node'
alias kdno='kubectl describe node'
alias kdelno='kubectl delete node'

# PVC management.
alias kgpvc='kubectl get pvc'
alias kgpvca='kubectl get pvc --all-namespaces'
alias kgpvcw='kgpvc --watch'
alias kepvc='kubectl edit pvc'
alias kdpvc='kubectl describe pvc'
alias kdelpvc='kubectl delete pvc'


# }}}1

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
[ -f $HOME/.zshrc.user ] && source $HOME/.zshrc.user

# vim: nu et sw=2 ft=zsh sts=2 ts=8 fdm=marker fdc=2

export PATH="$PATH:$HOME/.ft"
